name: Publish PowerShell Module (v2)

on: workflow_dispatch
#  push:
#    branches: [main]

jobs:
  PSGallery-Publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Module Manifest & Change Tracking
        shell: pwsh
        run: |
          Write-Host "Updating changes to Module.."
          Copy-Item "./Modules/BloxOne-Main.ps1" "./Modules/ibPS/BloxOne-Main.psm1" -Force

          Write-Host "Testing Module Manifest.."
          $Module = Test-ModuleManifest -Path "./Modules/ibPS/ibPS.psd1"

          $ModuleVersion = [version]$Module.Version
          if ((Find-Module -Name ibPS).Version -eq $ModuleVersion) {
            $IsCurrentVersion = $true
          }

          $ModuleVersion = [version]::New($ModuleVersion.Major,$ModuleVersion.Minor,$ModuleVersion.Build,$ModuleVersion.Revision+1)
          
          Write-Host "Updating release notes"
          $ReleaseNotes = Get-Content -Path './RELEASE.md' -Raw

          ## Functions to export
          $B1PublicFunctions = Get-ChildItem "./Modules/ibPS/Functions/BloxOneDDI/*.ps1"
          $NIOSPublicFunctions = Get-ChildItem "./Modules/ibPS/Functions/NIOS/*.ps1"
          $AdditionalFunctionsToImport = "Get-ibPSVersion","Query-NIOS"

          Write-Host "Updating Module Manifest to v$ModuleVersion.."
          Update-ModuleManifest "./Modules/ibPS/ibPS.psd1" -ModuleVersion $ModuleVersion -FunctionsToExport ($(@($B1PublicFunctions + $NIOSPublicFunctions) | Select-Object -ExpandProperty BaseName) + $AdditionalFunctionsToImport) -AliasesToExport '*' -ReleaseNotes $($ReleaseNotes)

          Write-Host "Updating CHANGELOG.."
          $ChangeHistory = Get-Content -Path './CHANGELOG.md' -Raw
          $ModuleVersionString = "## $($ModuleVersion.ToString())"
          Set-Content -Path './CHANGELOG.md' -Value ($ModuleVersionString + "`r`n" + $ReleaseNotes + "`r`n`r`n" + $ChangeHistory)

          Write-Host "Export Github Actions Environment Variables.."
          $Version = "v$($ModuleVersion.ToString())"
          Write-Output "Version=$($Version)" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "ReleaseNotes<<EOF" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "$($ReleaseNotes)" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "EOF" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append

      - name: Install platyPS module
        shell: pwsh
        run: |
          Write-Host "Installing platyPS Powershell Module.."
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module platyPS -ErrorAction Stop

      - name: Update Documentation
        shell: pwsh
        run: |
          Write-Host "Creating temporary docs directory.."
          New-Item -ItemType Directory './docs-temp'

          Write-Host "Importing ibPS Module.."
          Import-Module './Modules/ibPS/ibPS.psd1' -Force -DisableNameChecking

          Write-Host "Updating documentation.."
          New-MarkdownHelp -Module ibPS -OutputFolder './docs-temp' -HelpVersion 1.9.2.5 -Force

          Write-Host "Cleaning up old documentation.."
          Get-ChildItem ./docs/Functions -Recurse -File | Remove-Item -Force

          Write-Host "Relocating documentation.."
          foreach ($F in Get-ChildItem './Modules/ibPS/Functions/' -Recurse) {
            $DocToFind = "./docs-temp/$($F.BaseName).md"
            if (Test-Path $DocToFind) {
              $BaseName = (Get-Item $F.DirectoryName).BaseName
              switch ($BaseName) {
                "BloxOneDDI" {
                  $BaseName = "BloxOne"
                }
                "Private" {
                  $BaseName = (Get-Item (Split-Path $($F.DirectoryName))).BaseName
                }
                "Misc" {
                  $BaseName = "General"
                }
              }
              Move-Item "$($DocToFind)" "./docs/Functions/$($BaseName)/" -Force
            }
          }

          Write-Host "Removing temporary docs directory.."
          Remove-Item './docs-temp' -Recurse -Force -Confirm:$false

      - name: Build and Publish
        id: build
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        shell: pwsh
        run: |
          $Manifest = Test-ModuleManifest -Path "./Modules/ibPS/ibPS.psd1"
          if ($($Manifest).Version -gt $(Find-Module ibPS).Version) {
            Write-Host "Publishing v$($Manifest.Version.ToString()).."
            #Publish-Module -Name "ibPS" -NuGetApiKey $env:NUGET_KEY -SkipAutomaticTags -Verbose
            Write-Output "ReleaseUpdated=true" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Host "Version number is the same, skipping publishing.."
            Write-Output "ReleaseUpdated=false" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
          }
          $Branch = git rev-parse --abbrev-ref HEAD
          Write-Output ("Branch=$($Branch)") | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
          if ($Branch -eq "main") {
            Write-Output "TagName=${{ env.Version }}" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
            Write-Output "ReleaseName=Release ${{ env.Version }}" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
            Write-Output "LatestRelease=true" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
            Write-Output "PreRelease=false" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Output "TagName=$($Branch)-${{ env.Version }}" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
            Write-Output "ReleaseName=$($Branch) - Release ${{ env.Version }}" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
            Write-Output "LatestRelease=false" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
            Write-Output "PreRelease=true" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
          }

      - name: Update Repository
        run: |
          git config --global user.name ${{ github.actor }}
          git config --global user.password ${{ secrets.GIT_ACTIONS }}
          git config --global user.email 'mat.cox@tmmn.uk'
          git add .
          git status
          git commit -m "Update Module to ${{ env.Version }}"
          git push

      - name: Create Release
        if: ${{ env.ReleaseUpdated == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACTIONS }}
        with:
          tag_name: ${{ env.TagName }}
          release_name: ${{ env.ReleaseName }}
          body: ${{ env.ReleaseNotes }}
          prerelease: ${{ env.PreRelease }}
          draft: false
          makeLatest: ${{ env.LatestRelease }}
